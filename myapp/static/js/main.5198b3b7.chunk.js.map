{"version":3,"sources":["images/biohazard.png","api-key.jsx","components/todayWeather/TodayWeather.jsx","components/search/Search.jsx","pages/home/Home.jsx","components/fiveDayForecast/FiveDayForecast.jsx","pages/daily/FiveDays.jsx","pages/lost/Lost.jsx","components/navigation/Navigation.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodayWeather","props","humidity","searchedCity","searchedCountry","temperature","weather","weather_icon","pressure","wind","loadingWeather","error","errorMessage","iconUrl","className","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","type","color","height","width","src","alt","Search","state","city","country","onInput","ev","preventDefault","setState","target","name","value","onFormSubmit","handleInputChange","this","method","onChange","defaultValue","placeholder","handleInput","onClick","Component","Home","onNewInput","localStorage","setItem","storedCity","getItem","storedCountry","length","weatherURL","apiConfig","fetch","then","response","a","json","weatherData","ok","err","message","statusText","Promise","reject","sys","Math","round","main","temp","description","icon","speed","toFixed","catch","FiveDayForecast","dailyData","cityData","loadingForecast","map","forecast","index","key","dt_txt","split","feels_like","temp_min","temp_max","Today","onInputChange","forecastURL","data","list","filter","reading","includes","Lost","style","margin","paddingTop","biohazard","Navigation","activeClassName","to","exact","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.5198b3b7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/biohazard.46bba648.png\";","export default {\r\n  owmKey: \"xxxxxxxxxxxxxxxxxxxxxxxxxxx\"\r\n};\r\n","import React from \"react\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport { WiHumidity } from \"react-icons/wi\";\r\nimport { WiBarometer } from \"react-icons/wi\";\r\nimport { WiStrongWind } from \"react-icons/wi\";\r\n\r\nconst TodayWeather = props => {\r\n  const {\r\n    humidity,\r\n    searchedCity,\r\n    searchedCountry,\r\n    temperature,\r\n    weather,\r\n    weather_icon,\r\n    pressure,\r\n    wind,\r\n    loadingWeather,\r\n    error,\r\n    errorMessage\r\n  } = props;\r\n\r\n  const iconUrl = `http://openweathermap.org/img/wn/${weather_icon}@2x.png`;\r\n\r\n  const today = () => {\r\n    let today = new Date();\r\n    let dd = String(today.getDate()).padStart(2, \"0\");\r\n    let mm = String(today.getMonth() + 1).padStart(2, \"0\");\r\n    let yyyy = today.getFullYear();\r\n    today = dd + \"/\" + mm + \"/\" + yyyy;\r\n    return today;\r\n  };\r\n\r\n  return (\r\n    <div className=\"today-weather-container\">\r\n      <h3 className=\"date\">{today()}</h3>\r\n\r\n      {error && (\r\n        <div className=\"error-container\">\r\n          <h2 className=\"error-message\">{errorMessage}</h2>\r\n          <h2>Please enter the city</h2>\r\n        </div>\r\n      )}\r\n      {loadingWeather && (\r\n        <div className=\"loader-container\">\r\n          <Loader type=\"Puff\" color=\"#1d4e89\" height={100} width={100} />\r\n        </div>\r\n      )}\r\n      {searchedCity && (\r\n        <div className=\"weather-container\">\r\n          <h2 className=\"city\">\r\n            {searchedCity} {searchedCountry}\r\n          </h2>\r\n          <h3 className=\"weather\">{weather}</h3>\r\n          <div className=\"icon-temperature\">\r\n            <img className=\"weather-icon\" src={iconUrl} alt=\"weather icon\" />\r\n            <h1 className=\"temperature-container\">\r\n              {temperature}\r\n              &deg;C\r\n            </h1>\r\n          </div>\r\n\r\n          <div className=\"measurement-container\">\r\n            <div className=\"icon-container\">\r\n              <WiBarometer />\r\n\r\n              <h2>{pressure}</h2>\r\n            </div>\r\n            <div className=\"icon-container\">\r\n              <WiHumidity />\r\n\r\n              <h2>{humidity}</h2>\r\n            </div>\r\n            <div className=\"icon-container\">\r\n              <WiStrongWind />\r\n\r\n              <h2>{wind}</h2>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodayWeather;\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Search extends Component {\r\n  state = {\r\n    city: \"\",\r\n    country: \"\"\r\n  };\r\n\r\n  onInput = ev => {\r\n    ev.preventDefault();\r\n    this.setState({ [ev.target.name]: ev.target.value });\r\n  };\r\n\r\n  onFormSubmit = () => {\r\n    const { city, country } = this.state;\r\n    this.props.handleInputChange(city, country);\r\n  };\r\n\r\n  render() {\r\n    const { city, country } = this.state;\r\n    return (\r\n      <div className=\"search_container\">\r\n        <form method=\"get\">\r\n          <input\r\n            onChange={this.onInput}\r\n            type=\"text\"\r\n            name=\"city\"\r\n            defaultValue={city}\r\n            placeholder=\"City...\"\r\n          />\r\n          <input\r\n            onChange={this.handleInput}\r\n            type=\"text\"\r\n            name=\"country\"\r\n            defaultValue={country}\r\n            placeholder=\"Country...\"\r\n          />\r\n\r\n          <button onClick={this.onFormSubmit}>Get Weather</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport apiConfig from \"../../api-key\";\r\nimport TodayWeather from \"../../components/todayWeather/TodayWeather\";\r\nimport Search from \"../../components/search/Search\";\r\n\r\nexport default class Home extends Component {\r\n  state = {\r\n    humidity: \"\",\r\n    searchedCity: \"\",\r\n    searchedCountry: \"\",\r\n    weather: \"\",\r\n    weather_icon: \"\",\r\n    temperature: \"\",\r\n    pressure: \"\",\r\n    wind: \"\",\r\n    loadingWeather: true,\r\n    error: false,\r\n    errorMessage: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    const storedCity = localStorage.getItem(\"storedCity\");\r\n    const storedCountry = localStorage.getItem(\"storedCountry\");\r\n\r\n    if (storedCity.length === 0) {\r\n      this.setState({ error: true, loadingWeather: false });\r\n    }\r\n    if (storedCity) {\r\n      const weatherURL = `http://api.openweathermap.org/data/2.5/weather?q=${storedCity},${storedCountry}&units=metric&APPID=${apiConfig.owmKey}`;\r\n\r\n      fetch(weatherURL)\r\n        .then(async response => {\r\n          const weatherData = await response.json();\r\n          if (!response.ok) {\r\n            const err =\r\n              (weatherData && weatherData.message) || response.statusText;\r\n            return Promise.reject(err);\r\n          }\r\n          this.setState({\r\n            searchedCity: weatherData.name,\r\n            searchedCountry: weatherData.sys.country,\r\n            temperature: Math.round(weatherData.main.temp),\r\n            weather: weatherData.weather[0].description,\r\n            weather_icon: weatherData.weather[0].icon,\r\n            pressure: weatherData.main.pressure,\r\n            humidity: weatherData.main.humidity,\r\n            wind: Math.round(weatherData.wind.speed, 1).toFixed(1),\r\n            loadingWeather: false,\r\n            error: false\r\n          });\r\n        })\r\n        .catch(err => {\r\n          this.setState({\r\n            error: true,\r\n            loadingWeather: false,\r\n            errorMessage: err\r\n          });\r\n        });\r\n    }\r\n  }\r\n  onNewInput = (city, country) => {\r\n    localStorage.setItem(\"storedCity\", city);\r\n    localStorage.setItem(\"storedCountry\", country);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      searchedCountry,\r\n      searchedCity,\r\n      temperature,\r\n      weather,\r\n      weather_icon,\r\n      pressure,\r\n      humidity,\r\n      wind,\r\n      loadingWeather,\r\n      error,\r\n      errorMessage\r\n    } = this.state;\r\n    return (\r\n      <div className=\"today-weather-page\">\r\n        <Search handleInputChange={this.onNewInput} />\r\n        <TodayWeather\r\n          searchedCity={searchedCity}\r\n          searchedCountry={searchedCountry}\r\n          temperature={temperature}\r\n          weather={weather}\r\n          weather_icon={weather_icon}\r\n          pressure={pressure}\r\n          humidity={humidity}\r\n          wind={wind}\r\n          loadingWeather={loadingWeather}\r\n          error={error}\r\n          errorMessage={errorMessage}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nconst FiveDayForecast = props => {\r\n  const { dailyData, cityData, error, loadingForecast, errorMessage } = props;\r\n\r\n  return (\r\n    <section>\r\n      {error && (\r\n        <div className=\"error-container\">\r\n          <h3 className=\"error-message\">{errorMessage}</h3>\r\n          <h1>Please enter the city</h1>\r\n        </div>\r\n      )}\r\n      {loadingForecast && (\r\n        <div className=\"loader-container\">\r\n          <Loader type=\"Puff\" color=\"#1d4e89\" height={100} width={100} />\r\n        </div>\r\n      )}\r\n      {cityData.name && (\r\n        <div>\r\n          <h1>\r\n            Five day forecast for{\" \"}\r\n            <span>\r\n              {cityData.name} {cityData.country}\r\n            </span>\r\n          </h1>\r\n          <div className=\"article-container\">\r\n            {dailyData.map((forecast, index) => (\r\n              <article key={index}>\r\n                <h1>{forecast.dt_txt.split(\"\", 10)}</h1>\r\n                <div className=\"icon-container\">\r\n                  <img\r\n                    src={`http://openweathermap.org/img/wn/${forecast.weather[0].icon}@2x.png`}\r\n                    alt=\"Weather\"\r\n                  />\r\n                  <h2>{Math.round(forecast.main.temp)} &deg;C</h2>\r\n                </div>\r\n\r\n                <h2 className=\"weather\">{forecast.weather[0].description}</h2>\r\n                <table className=\"measurement-container\">\r\n                  <tbody>\r\n                    <tr>\r\n                      <td>Feels like</td>\r\n                      <td>{Math.round(forecast.main.feels_like)} &deg;C</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Min temp.</td>\r\n                      <td>{Math.round(forecast.main.temp_min)} &deg;C</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Max temp.</td>\r\n                      <td>{Math.round(forecast.main.temp_max)} &deg;C</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Pressure</td>\r\n                      <td>{forecast.main.pressure} hPa</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Humidity</td>\r\n                      <td>{forecast.main.humidity} %</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Wind gusts</td>\r\n                      <td>\r\n                        {Math.round(forecast.wind.speed, 1).toFixed(1)} m/s\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </article>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default FiveDayForecast;\r\n","import React, { Component } from \"react\";\r\nimport apiConfig from \"../../api-key\";\r\nimport Search from \"../../components/search/Search\";\r\nimport FiveDayForecast from \"../../components/fiveDayForecast/FiveDayForecast\";\r\n\r\nexport default class Today extends Component {\r\n  state = {\r\n    cityData: [],\r\n    dailyData: [],\r\n    loadingForecast: true,\r\n    error: false,\r\n    errorMessage: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    const storedCity = localStorage.getItem(\"storedCity\");\r\n    const storedCountry = localStorage.getItem(\"storedCountry\");\r\n    if (storedCity.length === 0) {\r\n      this.setState({ error: true, loadingForecast: false });\r\n    }\r\n    const forecastURL = `http://api.openweathermap.org/data/2.5/forecast?q=${storedCity},${storedCountry}&units=metric&APPID=${apiConfig.owmKey}`;\r\n    if (storedCity) {\r\n      fetch(forecastURL)\r\n        .then(async response => {\r\n          const data = await response.json();\r\n\r\n          if (!response.ok) {\r\n            const err = (data && data.message) || response.statusText;\r\n            return Promise.reject(err);\r\n          }\r\n          const dailyData = await data.list.filter(reading =>\r\n            reading.dt_txt.includes(\"18:00:00\")\r\n          );\r\n          this.setState({\r\n            cityData: data.city,\r\n            dailyData,\r\n            loadingForecast: false,\r\n            error: false\r\n          });\r\n        })\r\n        .catch(err => {\r\n          this.setState({\r\n            error: true,\r\n            loadingForecast: false,\r\n            errorMessage: err\r\n          });\r\n        });\r\n    }\r\n  }\r\n  onInputChange = (city, country) => {\r\n    localStorage.setItem(\"storedCity\", city);\r\n    localStorage.setItem(\"storedCountry\", country);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      dailyData,\r\n      cityData,\r\n      error,\r\n      loadingForecast,\r\n      errorMessage\r\n    } = this.state;\r\n    return (\r\n      <div className=\"five-days-forecast\">\r\n        <Search handleInputChange={this.onInputChange} />\r\n        <FiveDayForecast\r\n          dailyData={dailyData}\r\n          cityData={cityData}\r\n          error={error}\r\n          loadingForecast={loadingForecast}\r\n          errorMessage={errorMessage}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport biohazard from \"../../images/biohazard.png\";\r\n\r\nconst Lost = () => {\r\n  return (\r\n    <div style={{ width: \"350px\", margin: \"0 auto\" }}>\r\n      <h1 style={{ color: \"red\" }}>You`re lost! Get back!!</h1>\r\n      <img style={{ paddingTop: \"50px\" }} src={biohazard} alt=\"Back\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Lost;\r\n","import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport default class Navigation extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"menu\">\r\n        <NavLink activeClassName=\"active\" to=\"/\" exact>\r\n          TODAY\r\n        </NavLink>\r\n\r\n        <NavLink activeClassName=\"active\" to=\"/daily\">\r\n          5 DAYS\r\n        </NavLink>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport \"./scss/App.scss\";\r\nimport Home from \"./pages/home/Home\";\r\nimport FiveDays from \"./pages/daily/FiveDays\";\r\nimport Lost from \"./pages/lost/Lost\";\r\nimport Navigation from \"./components/navigation/Navigation\";\r\n\r\nexport default class App extends Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className=\"App\">\r\n          <Navigation />\r\n          <Switch>\r\n            <Route exact path=\"/\" component={props => <Home {...props} />} />\r\n            <Route path=\"/daily\" component={props => <FiveDays {...props} />} />\r\n            <Route component={Lost} />\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}